{"version":3,"sources":["App.js","index.js"],"names":["App","useState","stats","setStats","list","setList","error","setError","year","setYear","useEffect","timeout","setTimeout","clearTimeout","console","log","newList","data","reduce","acc","curr","addType","type","toLowerCase","includes","vacation","sickness","parseToVacationAndSickness","class","href","id","onChange","ev","target","value","indexOf","raw","split","slice","join","TSV","parse","cols","rows","style","color","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"mNAwBe,SAASA,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,qBAAU,WACR,IAAIC,EAAU,EAMd,OALIL,IACFK,EAAUC,YAAW,WACnBL,GAAS,EACV,GAAE,MAEE,kBAAMM,aAAaF,EAAnB,CACR,GAAE,CAACL,IAEJI,qBAAU,WACRI,QAAQC,IAAIX,GACZ,IAAMY,EAtCyB,SAACC,EAAMT,GAAP,OACjCS,EACIA,EAAKC,QACH,SAACC,EAAKC,GAAU,IAAD,IACPC,EAAU,SAACC,GAAD,OACdF,EAAI,KAASG,cAAcC,SAASF,GAAQF,EAAI,UAAgB,CADlD,EAEhB,OAAO,UAAAA,EAAI,YAAJ,mBAAcI,gBAAd,gBAAyBhB,GAC5B,CACEiB,SAAUN,EAAIM,SAAWJ,EAAQ,YACjCK,SAAUP,EAAIO,SAAWL,EAAQ,aAEnCF,CACL,GACD,CACEM,SAAU,EACVC,SAAU,IAGd,EAlB6B,CAsCfC,CAA2BvB,EAAMI,GACjDM,QAAQC,IAAIC,GACZb,EAASa,EACV,GAAE,CAACZ,EAAMI,IAGR,sBAAKoB,MAAM,MAAX,UACE,uCACA,4BACE,+BACE,wCACQ,mBAAGC,KAAK,mCAAR,wBAER,oDACA,uDACA,iHAIA,kGAGJ,0BACEC,GAAG,gBACHC,SAAU,SAACC,GAAQ,IAAD,IAChBlB,QAAQC,IAAR,UAAYiB,EAAGC,OAAOC,aAAtB,aAAY,EAAiBC,QAAQ,oBACrC,IAAMC,EAAM,UAAAJ,EAAGC,OAAOC,aAAV,SAAiBC,QAAQ,mBACjCH,EAAGC,OAAOC,MACVF,EAAGC,OAAOC,MAAMG,MAAM,MAAMC,MAAM,GAAGC,KAAK,MAC9CzB,QAAQC,IAAIqB,GACZ/B,EAAQmC,MAAIC,MAAML,GACnB,EACDM,KAAM,IACNC,KAAM,KAEPrC,GACC,qCACE,mBAAGsC,MAAO,CAAEC,MAAO,OAAnB,wHAIA,wBAAQC,QAAS,kBAAMvC,GAAS,EAAf,EAAjB,kBACA,0BAGJ,sEACA,uBAAOwB,SAAU,SAACC,GAAD,OAAQvB,EAAQuB,EAAGC,OAAOC,MAA1B,IACjB,uBACA,qDAAwBhC,EAAMuB,UAAY,KAC1C,iDAAoBvB,EAAMwB,UAAY,KACtC,yBAGL,CC1FD,IAAMqB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACnD,EAAD,MAEF+C,E","file":"static/js/main.1ba09fae.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState, useEffect } from \"react\";\nimport { TSV } from \"tsv\";\n\nconst parseToVacationAndSickness = (data, year) =>\n  data\n    ? data.reduce(\n        (acc, curr) => {\n          const addType = (type) =>\n            curr[\"Type\"].toLowerCase().includes(type) ? curr[\"Requested\"] : 0;\n          return curr[\"Date\"]?.includes?.(year)\n            ? {\n                vacation: acc.vacation + addType(\"vacation\"),\n                sickness: acc.sickness + addType(\"sickness\")\n              }\n            : acc;\n        },\n        {\n          vacation: 0,\n          sickness: 0\n        }\n      )\n    : \"\";\n\nexport default function App() {\n  const [stats, setStats] = useState(\"\");\n  const [list, setList] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [year, setYear] = useState(false);\n\n  useEffect(() => {\n    let timeout = 0;\n    if (error) {\n      timeout = setTimeout(() => {\n        setError(false);\n      }, 10000);\n    }\n    return () => clearTimeout(timeout);\n  }, [error]);\n\n  useEffect(() => {\n    console.log(list);\n    const newList = parseToVacationAndSickness(list, year);\n    console.log(newList);\n    setStats(newList);\n  }, [list, year]);\n\n  return (\n    <div class=\"App\">\n      <h2>Usage</h2>\n      <p>\n        <ol>\n          <li>\n            Go to <a href=\"https://wd3.myworkday.com/klarna\">workday</a>\n          </li>\n          <li>Click on \"Absence\"</li>\n          <li>Click on \"My Absence\"</li>\n          <li>\n            On the top-right above the table click the second icon (\"Export to\n            worksheets\")\n          </li>\n          <li>Mark the table and copy it, then paste it here ðŸ‘‡</li>\n        </ol>\n      </p>\n      <textarea\n        id=\"list-textarea\"\n        onChange={(ev) => {\n          console.log(ev.target.value?.indexOf(\"Absence Request\"));\n          const raw = ev.target.value?.indexOf(\"Absence Request\")\n            ? ev.target.value\n            : ev.target.value.split(\"\\n\").slice(1).join(\"\\n\");\n          console.log(raw);\n          setList(TSV.parse(raw));\n        }}\n        cols={100}\n        rows={20}\n      ></textarea>\n      {error && (\n        <>\n          <p style={{ color: \"red\" }}>\n            This file doesn't look right. .csv file must contain merchant_name\n            and a column with 'brand' in its title.\n          </p>\n          <button onClick={() => setError(false)}>Okay</button>\n          <br />\n        </>\n      )}\n      <h3>Enter the year you're interested in:</h3>\n      <input onChange={(ev) => setYear(ev.target.value)} />\n      <br />\n      <p>Your vacation days: {stats.vacation || 0}</p>\n      <p>Your sick days: {stats.sickness || 0}</p>\n      <br />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}